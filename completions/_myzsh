#compdef myzsh

# This is just the tab completion stuff. I wonder if it can be merged into myzsh() ?
_myzsh () {
	local -a verbs
	IFS=$'\n'
	# words[2] is whatever is already typed into the command line after "myzsh "
	case "$words[2]" in
	# FIXME figure out if we can remove the trailing slash on matched modules
	edit)
		_files -W "$MYZSH/modules/"
		;;
	reload)
		_files -W "$MYZSH/modules/"
		;;
	info)
		_files -W "$MYZSH/modules/"
		;;
	test)
		_files -W "$MYZSH/modules/"
		;;
	disable)
		# actually reading from the variables loaded to this environment
		local -a modules
		modules=( $( echo $LPRIMARY $LSECONDARY $RPRIMARY $RSECONDARY $EXTRA $TITLE |tr ' ' '\n' | sort | uniq ) )
		compadd $modules
		;;
	enable)
		# if our location isn't exactly what we expect for a valid location
		if [	"$words[3]" != "lprimary" \
				-a "$words[3]" != "lsecondary" \
				-a "$words[3]" != "rprimary" \
				-a "$words[3]" != "rsecondary" \
				-a "$words[3]" != "extra" ]; then
			local -a locations
			locations=( "lprimary:Left Primary (upper)"
						"lsecondary:Left Secondary (lower)"
						"rprimary:Right Primary (upper)"
						"rsecondary:Right Secondary (lower)"
						"title:title of the screen or tmux window"
						"extra:Loads, but produces no output"
					)
			_describe -t commands 'myzsh enable commands' locations -V1
		else
			_files -W "$MYZSH/modules/"
		fi
		;;
	remote)
		# if our location isn't exactly what we expect for a valid location
		if [ "$words[3]" = "add" ]; then
			local -a locations
			locations=( "ssh\://:git via ssh"
						"git\://:git via... git"
						"http\://:git or svn via http"
						"https\://:git or svn via https"
						"file\://:copy from local directory"
					)
			_describe -t commands 'myzsh remote commands' locations -V1
		elif [ "$words[3]" = "remove" ]; then
			_files -W "$MYZSH/remotes/"
		elif [ "$words[3]" = "list" ]; then
			_files -W "$MYZSH/remotes/"
		else
			local -a locations
			locations=( "add:Add new configs from git repo"
						"remove:Remove remote configs"
						"list:list remote directories"
					)
			_describe -t commands 'myzsh remote commands' locations -V1
		fi
		;;
	set)
		# if our key to set isn't in our globals, suggest a better key
		if [ -z "${GLOBALS[${words[3]}]}" ]; then
			local -a vars
			vars=( $(
				for k in "${(k)GLOBALS[@]}"; do
					echo "$k:Default ${GLOBALS[$k]}"
				done | sort
			) )
			_describe -t commands 'myzsh set variables' vars -V1
			echo "Got this far" >> /tmp/log
		else
			# give up the default value for the key
			local -a array
			array=( "${GLOBALS[${words[3]}]}" )
			compadd $array
		fi
		;;
	unset)
		# if our key to set isn't in our globals, suggest a better key
		if [ -z "${GLOBALS[${words[3]}]}" ]; then
			local -a vars
			vars=( $(
				for k in "${(k)GLOBALS[@]}"; do
					echo "$k:Default ${GLOBALS[$k]}"
				done | sort
			) )
			_describe -t commands 'myzsh set variables' vars -V1
		fi
		;;

		# FIXME this could be done better, fixing [LPRIMARY,LSECONDARY,...] files ...
	*)
		verbs=( $(myzsh | grep " - " | sed 's/^ *//;s/ - /:/' | sort) )
		_describe -t commands 'myzsh commands' verbs -V1;;
	esac
	return 1
}

_myzsh "$@"
