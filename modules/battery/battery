globalvar BATT_TIME 0
globalvar BATT_METER 0

# Generate the battery number
function battery_pct() {
   if isosx; then
      if [[ $(ioreg -rc AppleSmartBattery | grep -c '^.*"ExternalConnected"\ =\ No') -eq 1 ]] ; then
         typeset -F maxcapacity=$(ioreg -rc "AppleSmartBattery"| grep '^.*"MaxCapacity"\ =\ ' | sed -e 's/^.*"MaxCapacity"\ =\ //')
         typeset -F currentcapacity=$(ioreg -rc "AppleSmartBattery"| grep '^.*"CurrentCapacity"\ =\ ' | sed -e 's/^.*CurrentCapacity"\ =\ //')
         integer i=$(((currentcapacity/maxcapacity) * 100))
      else
         i="⚡"
      fi
   else
		local acpi="$(acpi -b 2>/dev/null)"
		local battp=${acpi%%%*}
		integer i=${battp##* }
   fi
   echo $i
}

# Generate the time remaining
function battery_time_remaining() {
   if isosx; then
      if [[ $(ioreg -rc AppleSmartBattery | grep -c '^.*"ExternalConnected"\ =\ No') -eq 1 ]] ; then
         timeremaining=$(ioreg -rc "AppleSmartBattery"| grep '^.*"AvgTimeToEmpty"\ =\ ' | sed -e 's/^.*"AvgTimeToEmpty"\ =\ //')
         i="$((timeremaining / 60)):$((timeremaining % 60))"
      else
         i="∞"
      fi
   else
		local acpi="$(acpi -b 2>/dev/null)"
		local tmp=${acpi% *}
		i="${tmp##* }"
   fi
   echo $i
}

# Display the relevant details for the prompt
function battery_prompt() {
      color='green'
      batt_time=""
      pct=$(battery_pct)

      if [[ "$pct" != "⚡" ]] ; then
         if [ $pct -lt 21 ] ; then
            color='red'
         elif [ $pct -lt 51 ] ; then
            color='yellow'
         fi
         pct=${pct}%

         [ $BATT_TIME != 0 ] && batt_time=" $(battery_time_remaining)"
      fi

      echo "%{$fg[$color]%}$pct%$batt_time%{$reset_color%}"
}

OUTPUT=battery_prompt
# vim: filetype=zsh noexpandtab
